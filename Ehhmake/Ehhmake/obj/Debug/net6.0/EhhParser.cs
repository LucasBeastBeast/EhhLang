//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from G:\Projects\My Rule\Ehhmake\Ehhmake\Ehhmake\GrammarContent\Ehh.g4 by ANTLR 4.6.6

// Unreachable code detected

using Ehhmake.Content;

#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ehhmake.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class EhhParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, LB=7, RB=8, INT=9, ID=10, 
		FILENAME=11, WS=12;
	public const int
		RULE_start = 0, RULE_widthValue = 1, RULE_heightValue = 2, RULE_colorValue = 3, 
		RULE_outputValue = 4;
	public static readonly string[] ruleNames = {
		"start", "widthValue", "heightValue", "colorValue", "outputValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ehh'", "'width:'", "'height:'", "'background:'", "'output:'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "LB", "RB", "INT", "ID", "FILENAME", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ehh.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public EhhParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(EhhParser.LB, 0); }
		public WidthValueContext widthValue() {
			return GetRuleContext<WidthValueContext>(0);
		}
		public HeightValueContext heightValue() {
			return GetRuleContext<HeightValueContext>(0);
		}
		public ColorValueContext colorValue() {
			return GetRuleContext<ColorValueContext>(0);
		}
		public OutputValueContext outputValue() {
			return GetRuleContext<OutputValueContext>(0);
		}
		public ITerminalNode RB() { return GetToken(EhhParser.RB, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEhhListener typedListener = listener as IEhhListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEhhListener typedListener = listener as IEhhListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEhhVisitor<TResult> typedVisitor = visitor as IEhhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; Match(T__0);
			State = 11; Match(LB);
			State = 12; Match(T__1);
			State = 13; widthValue();
			State = 14; Match(T__2);
			State = 15; heightValue();
			State = 16; Match(T__3);
			State = 17; colorValue();
			State = 18; Match(T__4);
			State = 19; outputValue();
			State = 20; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthValueContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(EhhParser.INT, 0); }
		public WidthValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEhhListener typedListener = listener as IEhhListener;
			if (typedListener != null) typedListener.EnterWidthValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEhhListener typedListener = listener as IEhhListener;
			if (typedListener != null) typedListener.ExitWidthValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEhhVisitor<TResult> typedVisitor = visitor as IEhhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthValueContext widthValue() {
		WidthValueContext _localctx = new WidthValueContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_widthValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeightValueContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(EhhParser.INT, 0); }
		public HeightValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heightValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEhhListener typedListener = listener as IEhhListener;
			if (typedListener != null) typedListener.EnterHeightValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEhhListener typedListener = listener as IEhhListener;
			if (typedListener != null) typedListener.ExitHeightValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEhhVisitor<TResult> typedVisitor = visitor as IEhhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeightValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeightValueContext heightValue() {
		HeightValueContext _localctx = new HeightValueContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_heightValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorValueContext : ParserRuleContext {
		public ITerminalNode[] INT() { return GetTokens(EhhParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(EhhParser.INT, i);
		}
		public ColorValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colorValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEhhListener typedListener = listener as IEhhListener;
			if (typedListener != null) typedListener.EnterColorValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEhhListener typedListener = listener as IEhhListener;
			if (typedListener != null) typedListener.ExitColorValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEhhVisitor<TResult> typedVisitor = visitor as IEhhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColorValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColorValueContext colorValue() {
		ColorValueContext _localctx = new ColorValueContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_colorValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(INT);
			State = 27; Match(T__5);
			State = 28; Match(INT);
			State = 29; Match(T__5);
			State = 30; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputValueContext : ParserRuleContext {
		public ITerminalNode FILENAME() { return GetToken(EhhParser.FILENAME, 0); }
		public OutputValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEhhListener typedListener = listener as IEhhListener;
			if (typedListener != null) typedListener.EnterOutputValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEhhListener typedListener = listener as IEhhListener;
			if (typedListener != null) typedListener.ExitOutputValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEhhVisitor<TResult> typedVisitor = visitor as IEhhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputValueContext outputValue() {
		OutputValueContext _localctx = new OutputValueContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_outputValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(FILENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xE%\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x2\x2\x2\a\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\x2\x2\x1F\x2\f\x3\x2\x2\x2\x4\x18\x3\x2\x2\x2\x6"+
		"\x1A\x3\x2\x2\x2\b\x1C\x3\x2\x2\x2\n\"\x3\x2\x2\x2\f\r\a\x3\x2\x2\r\xE"+
		"\a\t\x2\x2\xE\xF\a\x4\x2\x2\xF\x10\x5\x4\x3\x2\x10\x11\a\x5\x2\x2\x11"+
		"\x12\x5\x6\x4\x2\x12\x13\a\x6\x2\x2\x13\x14\x5\b\x5\x2\x14\x15\a\a\x2"+
		"\x2\x15\x16\x5\n\x6\x2\x16\x17\a\n\x2\x2\x17\x3\x3\x2\x2\x2\x18\x19\a"+
		"\v\x2\x2\x19\x5\x3\x2\x2\x2\x1A\x1B\a\v\x2\x2\x1B\a\x3\x2\x2\x2\x1C\x1D"+
		"\a\v\x2\x2\x1D\x1E\a\b\x2\x2\x1E\x1F\a\v\x2\x2\x1F \a\b\x2\x2 !\a\v\x2"+
		"\x2!\t\x3\x2\x2\x2\"#\a\r\x2\x2#\v\x3\x2\x2\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Ehhmake.GrammarContent
