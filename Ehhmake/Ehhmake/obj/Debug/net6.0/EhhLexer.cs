//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Project\My Rule\EhhLang\Ehhmake\Ehhmake\Content\Ehh.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ehhmake.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class EhhLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, LB=6, RB=7, INT=8, ID=9, STRING=10, 
		NEWLINE=11, WS=12;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "LB", "RB", "INT", "ID", "STRING", 
		"NEWLINE", "WS"
	};


	public EhhLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'::'", "':'", "','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "LB", "RB", "INT", "ID", "STRING", 
		"NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ehh.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\xEI\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x3\x2\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x6\t"+
		",\n\t\r\t\xE\t-\x3\n\x6\n\x31\n\n\r\n\xE\n\x32\x3\v\x3\v\a\v\x37\n\v\f"+
		"\v\xE\v:\v\v\x3\v\x3\v\x3\f\x6\f?\n\f\r\f\xE\f@\x3\r\x6\r\x44\n\r\r\r"+
		"\xE\r\x45\x3\r\x3\r\x3\x38\x2\x2\xE\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6"+
		"\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x3"+
		"\x2\b\x3\x2}}\x3\x2\x7F\x7F\x3\x2\x32;\x4\x2\x43\\\x63|\x4\x2\f\f\xF\xF"+
		"\x5\x2\v\f\xF\xF\"\"M\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2"+
		"\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2"+
		"\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3"+
		"\x2\x2\x2\x2\x19\x3\x2\x2\x2\x3\x1B\x3\x2\x2\x2\x5\x1E\x3\x2\x2\x2\a "+
		"\x3\x2\x2\x2\t\"\x3\x2\x2\x2\v$\x3\x2\x2\x2\r&\x3\x2\x2\x2\xF(\x3\x2\x2"+
		"\x2\x11+\x3\x2\x2\x2\x13\x30\x3\x2\x2\x2\x15\x34\x3\x2\x2\x2\x17>\x3\x2"+
		"\x2\x2\x19\x43\x3\x2\x2\x2\x1B\x1C\a<\x2\x2\x1C\x1D\a<\x2\x2\x1D\x4\x3"+
		"\x2\x2\x2\x1E\x1F\a<\x2\x2\x1F\x6\x3\x2\x2\x2 !\a.\x2\x2!\b\x3\x2\x2\x2"+
		"\"#\a]\x2\x2#\n\x3\x2\x2\x2$%\a_\x2\x2%\f\x3\x2\x2\x2&\'\t\x2\x2\x2\'"+
		"\xE\x3\x2\x2\x2()\t\x3\x2\x2)\x10\x3\x2\x2\x2*,\t\x4\x2\x2+*\x3\x2\x2"+
		"\x2,-\x3\x2\x2\x2-+\x3\x2\x2\x2-.\x3\x2\x2\x2.\x12\x3\x2\x2\x2/\x31\t"+
		"\x5\x2\x2\x30/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x32"+
		"\x33\x3\x2\x2\x2\x33\x14\x3\x2\x2\x2\x34\x38\a$\x2\x2\x35\x37\v\x2\x2"+
		"\x2\x36\x35\x3\x2\x2\x2\x37:\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x38\x36\x3"+
		"\x2\x2\x2\x39;\x3\x2\x2\x2:\x38\x3\x2\x2\x2;<\a$\x2\x2<\x16\x3\x2\x2\x2"+
		"=?\t\x6\x2\x2>=\x3\x2\x2\x2?@\x3\x2\x2\x2@>\x3\x2\x2\x2@\x41\x3\x2\x2"+
		"\x2\x41\x18\x3\x2\x2\x2\x42\x44\t\a\x2\x2\x43\x42\x3\x2\x2\x2\x44\x45"+
		"\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46G\x3\x2\x2\x2"+
		"GH\b\r\x2\x2H\x1A\x3\x2\x2\x2\b\x2-\x32\x38@\x45\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Ehhmake.Content
